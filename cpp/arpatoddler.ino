#include <StandardCplusplus.h>
#include <system_configuration.h>
#include <unwind-cxx.h>
#include <utility.h>
#include <vector>

const int LOWEST_BPM = 30;
const int HIGHEST_BPM = 220;
const int MAX_ANALOG_READ = 1024;


enum Note {A=0, B, C, D, E, F, G, PAUSE};
enum NoteEventType {ON, OFF};


/* The kind of events generated by the arpeggiator 
 */
struct MusicEvent {
  Note note;
  NoteEventType eventType;
  int index;
};


/* A Listener interface through which the arpeggiator can notify
 * the synth and the leds of musical changes 
 */
class MusicEventListener {
public:
  ~MusicEventListener() = default;
  virtual void handleMusicEvent(MusicEvent event) = 0;
};

class BeatListener {
public:
  ~BeatListener() = default;
  virtual void handleBeat() = 0;
};



/* Receives beats and arpeggiates through a sequence of notes.
 * The sequence can be defined.
 * On each beat the arpeggiator can emmit note on / note off events
 */
class Arpeggiator : public BeatListener {
public:
  Arpeggiator(const std::vector<MusicEventListener *> listeners) : listeners(listeners) {}

  /* enables / disables arpeggiator */
  void toggle() { running = !running; }
  void cycle(int index) {
    notes[index] = (Note)((notes[index] + 1) % PAUSE);
  }

  virtual void handleBeat() {
    int next_note = (current_note + 1) % 8;
    for (auto &listener : listeners) {
      listener->handleMusicEvent({notes[current_note], OFF, current_note});
      listener->handleMusicEvent({notes[next_note], ON, next_note});      
    }
    current_note = next_note;
  }

private:
  const std::vector<MusicEventListener *> listeners;
  int current_note;
  Note notes[8];
  bool running;
};



/* This will be a wrapper for the sound chip. It will be receiving the Note on/ Note off events
it will also receive options for adjusting the sound texture pitch etc through apropriate interfaces */
class Synth : public MusicEventListener {
public:
  virtual void handleMusicEvent(MusicEvent event) {};
};

/* Used to control the arpatodler arpegiator leds */
class LedArray : public MusicEventListener {
public:
  virtual void handleMusicEvent(MusicEvent event) {};
};


/* Emits beats based on a controllable BPM. The update method
 * Has to be called frequently for the beat events to be accurate.
 */
class BeatHolder {
public:
  BeatHolder(BeatListener &beat_listener) : beat_listener(beat_listener) {}
  /* Expects a value between LOWEST_BPM and HIGHEST_BPM */
  void setTempo(int bpm) {
    bpm_interval = 60L * 1000 / (2 * bpm);
  }
  /* Lets the beat holder to run its code and send beat events */
  void update() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis > bpm_interval) {
      previousMillis = currentMillis;
      beat_listener.handleBeat();
    }
  }
private:
  unsigned long previousMillis;
  unsigned long bpm_interval;
  BeatListener &beat_listener;
};



/* A class that abstracts an input e.g. button or potentiometer
 * and is repeatedly checked by the loop for possible events.
 * The events should be actuated through callbacks
 */
class Input {
public:
  virtual void update() = 0;
};

/* A button that triggers a callback when pressed 
 * We specifiy which pin the button is listening on 
 * and we take care of all debouncing etc.
 */
class Button : Input {
public:
  Button(void const (*cb)(int), int cb_data) : cb(cb), cb_data(cb_data) {}

private:
  void press() {
    (*cb)(cb_data);
  }

  void const (*cb)(int);
  const int cb_data;
};

/* This is the main class that pulls together all the different components
 * of the arpatoddler 
 */
class Arpatoddler {
public:
  Arpatoddler() : arpeggiator({&led_array, &synth}), beat_holder(arpeggiator) {}

  /* Essentialy the arduino loop, only it has visibility to all
   * the arpatoddler's private members
   */
  void loop(){
    /* Check for beats */
    beat_holder.update();

    /* Check inputs */
    for (auto &input : inputs) {
      input.update();
    }
  }

private:
  std::vector<Input> inputs;
  LedArray led_array;
  Synth synth;
  Arpeggiator arpeggiator;
  BeatHolder beat_holder; 
};


Arpatoddler arpatoddler;

void setup() {
}

void loop()
{
  arpatoddler.loop();
}

